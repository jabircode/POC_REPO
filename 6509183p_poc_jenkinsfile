pipeline {
    agent any

    stages {
        stage('ST1 6509183p') {
            steps {
                echo 'ST1 6509183p: Environment is prepared. Start to rollout to TEST server'
            }
        }

        stage('ST2 6509183p') {
            steps {
                script {
                    // Define the server and backup paths
                    def testServer = 'testsvr6509183p'
                    def backupDirectory = '/path/to/backups' // backup directory path
                    def backupFilename = 'BKUP-TEST-image.tar.gz' 
                    def sourceDirectory = '/path/to/source' // directory for backup
                    
                    // Remove any old backup image
                    sh "rm -f ${backupDirectory}/${backupFilename}"

                    // Create a new backup image
                    sh "tar -czf ${backupDirectory}/${backupFilename} -C ${sourceDirectory} ."
                    
                    // Output for verification
                    echo "Backup of TEST server ${testServer} created: ${backupDirectory}/${backupFilename}"

                    // Run bolt script
                    bolt script run /path/to/6509183p_script.sh --targets TESTsvr6509183p,PRODsvr6509183p
                }
                echo 'ST2 6509183p: TEST server is backup and updated'
            }
        }

        stage('ST3 6509183p') {
            steps {
                script {
                    // Define the variables
                    def politeId = '6509183p' 
                    def testServerUrl = "http://TESTsvr${politeId}.localdomain"
                    def resultFilePath = '/tmp/TEST-result-file'

                    // Execute the web test command and write the output to a file
                    sh "curl -Is ${testServerUrl} | head -n 1 > ${resultFilePath}"

                    // Read and echo the result for log output
                    sh "cat ${resultFilePath}"

                    // Check if the web test was successful (HTTP 200)
                    def result = readFile("${resultFilePath}").trim()
                    if (result == 'HTTP/1.1 200 OK') {
                        echo "Web test successful: ${result}"
                    } else {
                        error "Web test failed: ${result}"
                        }
                }
                echo 'ST3 6509183p: Test result for TEST server is generated: TEST-result-file'
            }
        }

        stage('ST4 6509183p') {
            steps {
                echo 'ST4 6509183p: TEST serverâ€™s testing result has been inspected'
            }
        }

        stage('ST5 6509183p') {
            steps {
                script {
                    def userInput = input(id: 'ProceedProductionOrRollbackTest', message: 'Choose Proceed Production or Rollback Test?', parameters: [choice(name: 'Choice', choices: 'Proceed Production\nRollback Test', description: 'Select your choice')])
                    if (userInput == 'Proceed Production') {
                        echo 'ST5 6509183p: Proceed to Production Phase'

                        // Run bolt script
                        bolt script run /path/to/6509183p_script.sh --targets TESTsvr6509183p,PRODsvr6509183p

                    } else {
                        echo 'ST5 6509183p: Rollback Test server'
                        // Define the backup file path and the target directory
                        def backupFilePath = '/path/to/backups/BKUP-TEST-image.tar.gz' // actual path backup file
                        def targetDirectory = '/path/to/target' // the directory where the files should be restored
                
                        // Remove current files
                        sh "rm -rf ${targetDirectory}/*"

                        // Extract files from the backup image
                        sh "tar -xzf ${backupFilePath} -C ${targetDirectory}"

                        echo 'Rollback completed successfully'
                    }
                }
            }
        }

        stage('ST6 6509183p') {
            steps {
                script {
                    def userInput = input(id: 'ProceedProductionOrRollbackTest', message: 'Choose Proceed Production or Rollback Test?', parameters: [choice(name: 'Choice', choices: 'Proceed Production\nRollback Test', description: 'Select your choice')])
                    if (userInput == 'Proceed Production') {
                        echo 'ST6 6509183p: Production server is updated'
                        
                    } else {
                        echo 'ST6 6509183p: TEST server is rollback.'
                        
                    }
                }
            }
        }
    }
}
